# Usage:
#   Any service with the 'build' attribute specified will be built and tagged with the name in the 'image' attribute. (-f [--file])
#   > docker-compose -f docker-compose.yml -f docker-compose.build.yml build
#   > docker-compose -f docker-compose.yml -f docker-compose.build.yml build --no-cache
#
version: "3.7"

services:
  ######################
  ### Infrastructure ###
  ######################
  ###########
  # Traefik #
  ###########
  traefik:
    # The context path is relative to the location of the Compose file, and the Dockerfile path is relative to the context.
    build:
      context: ./Traefik/
      dockerfile: ./Dockerfile
      args:
        BASE_OS_LAYER: mcr.microsoft.com/windows/nanoserver
        BASE_OS_LAYER_VERSION: 20H2
        BUILD_BASE_OS_LAYER: mcr.microsoft.com/windows/servercore
        BUILD_BASE_OS_LAYER_VERSION: 20H2
        TRAEFIK_VERSION: 2.4.0
        TRAEFIK_ROOT_URL: "https://github.com/traefik/traefik/releases/download/v{0}/traefik_v{1}_windows_amd64.zip"

  ###########
  # OpenSSL #
  ###########
  openssl:
    build:
      context: ./OpenSSL/
      dockerfile: ./Dockerfile
      args:
        BASE_OS_LAYER: mcr.microsoft.com/windows/nanoserver
        BASE_OS_LAYER_VERSION: 20H2
        # Use the Windows Server Core image with .NET Framework 4.8.
        BUILD_BASE_OS_LAYER: mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore
        BUILD_BASE_OS_LAYER_VERSION: 20H2
        PERL_URL: "https://strawberryperl.com/download/5.32.1.1/strawberry-perl-5.32.1.1-64bit.zip"
        OPENSSL_VERSION: openssl-1.1.1i
        OPENSSL_URL: "https://www.openssl.org/source/{0}.tar.gz"
        # The Netwide Assembler, NASM, is an 80x86 and x86-64 assembler designed for portability and modularity.
        NASM_VERSION: nasm-2.15.05
        NASM_URL: "https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/win64/{0}-win64.zip"
        VC_BUILDTOOLS_URL: "https://aka.ms/vs/15/release/vs_buildtools.exe"

  ##########
  # OAuth2 #
  ##########
  oauth2:
    build:
      context: ./OAuth2/
      dockerfile: ./Dockerfile
      args:
        BASE_OS_LAYER: mcr.microsoft.com/windows/nanoserver
        BASE_OS_LAYER_VERSION: 20H2
        BUILD_BASE_OS_LAYER: mcr.microsoft.com/windows/servercore
        BUILD_BASE_OS_LAYER_VERSION: 20H2
        HYDRA_URL: "https://github.com/ory/hydra/releases/download/v1.9.2/hydra_1.9.2-sqlite_windows_64bit.zip"

  ########################
  # NATS (Message-queue) #
  ########################
  nats-mq:
    build:
      context: ./NATS/
      dockerfile: ./Dockerfile
      args:
        BASE_OS_LAYER: mcr.microsoft.com/windows/nanoserver
        BASE_OS_LAYER_VERSION: 20H2
        # The NAT Server will look for this environment variable. When set, it prevents the use of the service API to detect if it is running in interactive mode or not, which is failing in the context of a Docker container.
        # (https://github.com/nats-io/gnatsd/issues/543)
        NATS_DOCKERIZED: 1

  ####################
  ### Applications ###
  ####################
  #####################
  # Publishes to NATS #
  #####################
  nats-publisher:
    build:
      context: ./Nats.Publisher/
      dockerfile: ./Dockerfile
      args:
        BASE_OS_LAYER: mcr.microsoft.com/dotnet/runtime
        BASE_OS_LAYER_VERSION: 5.0
        BUILD_BASE_OS_LAYER: mcr.microsoft.com/dotnet/sdk
        BUILD_BASE_OS_LAYER_VERSION: 5.0

  ######################
  # Subscribes to NATS #
  ######################
  nats-subscriber:
    build:
      context: ./Nats.Subscriber/
      dockerfile: ./Dockerfile
      args:
        BASE_OS_LAYER: mcr.microsoft.com/dotnet/runtime
        BASE_OS_LAYER_VERSION: 5.0
        BUILD_BASE_OS_LAYER: mcr.microsoft.com/dotnet/sdk
        BUILD_BASE_OS_LAYER_VERSION: 5.0

  #msfinances:
  #  build:
  #    context: ./MSFinances/
  #    dockerfile: ./Dockerfile
  #    args:
  #      BASE_OS_LAYER: mcr.microsoft.com/windows/nanoserver
  #      BASE_OS_LAYER_VERSION: 20H2
  #      BUILD_BASE_OS_LAYER: mcr.microsoft.com/windows/servercore
  #      BUILD_BASE_OS_LAYER_VERSION: 20H2
  #      VC_REDIST_URL: "https://aka.ms/vs/16/release/vc_redist.x64.exe"

#  esmovies:
#    build:
#      context: ./ESMovies/
#      dockerfile: ./Dockerfile
#      args:
#        BASE_OS_LAYER: mcr.microsoft.com/windows/nanoserver
#        BASE_OS_LAYER_VERSION: 1903
#        BUILD_BASE_OS_LAYER: mcr.microsoft.com/windows/servercore
#        BUILD_BASE_OS_LAYER_VERSION: 1903
#        PY_VERSION: "3.8.0"
#        PY_HOME: "C:/python/"
#        PY_INSTALL_TO_PATH: "../Python38"
#        PY_COPY_FROM_PATH: "./Program Files/Python38"
#        PY_ROOT_URL: "https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe"


