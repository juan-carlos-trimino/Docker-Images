# traefik.yml
# Static configuration
# Traefik (pronounced "traffic") is a open source reverse proxy/load balancer; it is written in GO.

# EntryPoints are the network entry points into Traefik. They define the port which will receive the requests (whether HTTP or
# TCP).
entryPoints:
  http:
    address: ":80"
  https:
    address: ":443"
#  dashboard:
#    address: ":8080"

# Docker configuration backend
providers:
  # It is the duration that Traefik waits for, after a configuration reload, before taking into account any new configuration
  # refresh event. If any event arrives during that duration, only the most recent one is taken into account, and all the
  # previous others are dropped. It defaults to 2 seconds.
  providersThrottleDuration: 10s
  docker:
    # Traefik exposes containers by default. If set to false, containers that don't have a traefik.enable=true label will be
    # ignored from the resulting routing configuration.
    exposedByDefault: false
    # It defines a default Docker network to use for connections to all containers. This option can be overridden on a container
    # basis with the traefik.docker.network label.
    # Run 'docker network ls' to see the actual name.
    # Run 'docker network inspect network-name-or-id' for more detail information.
    network: "nat"
    # It activates the Swarm Mode (instead of standalone Docker).
    swarmMode: false
    # Traefik requires access to the docker socket to get its dynamic configuration.
    endpoint: npipe:////./pipe/docker_engine
  #defaultRoute = "dev.local"
  #useBindPortIP = true
    # Enable watch docker changes.
    watch: true


# Enable the API handler.
api:
  # The dashboard is available at the same location as the API but on the path /dashboard/ by default.
  # The trailing slash (/) in /dashboard/ is mandatory.
  # Then specify a router associated to the service api@internal to allow:
  #   * Defining one or more security features through middlewares like authentication (basicAuth , digestAuth, forwardAuth) or
  #     whitelisting.
  #   * Defining your own HTTP routing rule for accessing the dashboard, through Traefik itself.
  dashboard: true
  # THIS MODE IS NOT RECOMMENDED BECAUSE IT DOES NOT ALLOW THE USE OF SECURITY FEATURES.
  # Enable the API in insecure mode, which means that the API will be available directly on the entryPoint named traefik.
  # (If the entryPoint named traefik is not configured, it will be automatically created on port 8080.)
  # You can now access the dashboard on the port 8080 of the Traefik instance, at the following
  # URL: http://<Traefik IP>:8080/dashboard/ (trailing slash is mandatory).
  insecure: true
  # Enable additional endpoints for debugging and profiling, served under /debug/.
  debug: true


ping: {}

# Let's Encrypt


# Log ERROR-level messages (or more severe) to the console, but silence
# DEBUG-level messages.
##debug = false
##logLevel = "ERROR"


# These options are for Traefik's integration with Docker.
##[docker]
  # Default base domain used for the frontend rules.
  # Can be overridden by setting the "traefik.domain" label on a container.
#  domain = "dev.local"

